apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    defaultConfig {
        applicationId "com.example.plugintest"
        minSdkVersion 11
        targetSdkVersion 22
        versionCode 1
        versionName "1.0.1"
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    buildTypes {
        release {
            versionNameSuffix '_' + getDate()
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            versionNameSuffix '_' + getDate()
        }
    }

}
dependencies {

    //如果插件需要依赖一些私有库，可放开下面的注释，并修改为私有库的名称
    //compile fileTree(dir: 'libs', include: ['*.jar'])
    //compile project(':PluginPrivateLib1')
    //compile project(':PluginPrivateLib2')
    //compile file('xxx/xxx.jar');


    ////////////////////////////////////////////
    //下面这一堆provided的配置，是因为这些包在编译宿主的时候，已经被打包到宿主的apk中。
    //所以这里打包非独立插件的时候，要通过provided配置防止这些包被打入非独立插件。
    //如果是独立插件，无需任何特殊配置
    ////////////////////////////////////////////

    //依赖库的src
    provided files(project(':PluginCore').getBuildDir().absolutePath + '/outputs/PluginCore.jar')
    provided files(project(':PluginBase').getBuildDir().absolutePath + '/outputs/PluginBase.jar')
    //依赖库的R
    provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/outputs/rClasses.jar')
    //依赖库的src
    provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/intermediates/bundles/debug/classes.jar')
    //依赖库的依赖裤（当supportV4在依赖库V的libs目录下时）
    //provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/intermediates/bundles/debug/libs/android-support-v4.jar')
    //依赖库的依赖裤（当supportV4通过仓库依赖时）
    provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/intermediates/exploded-aar/com.android.support/support-v4/23.3.0/jars/classes.jar')
    provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/intermediates/exploded-aar/com.android.support/support-v4/23.3.0/jars/libs/internal_impl-23.3.0.jar')
    provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/intermediates/exploded-aar/com.android.support/appcompat-v7/23.3.0/jars/classes.jar')
    //provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/intermediates/exploded-aar/com.android.support/animated-vector-drawable/23.3.0/jars/classes.jar')
    //provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/intermediates/exploded-aar/com.android.support/support-vector-drawable/23.3.0/jars/classes.jar')

}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy_MM_dd_HH_mm_ss')
    return formattedDate
}

build.doLast {
    //将编译好的插件apk复制到Main工程的assets目录下, 便于测试
    copy {
        println 'copy plugin apk to assets... ' + buildDir.absolutePath + '/outputs/apk/PluginTest-debug.apk'
        from(buildDir.absolutePath + '/outputs/apk/') {
            include 'PluginTest-debug.apk'
        }
        into(project(':PluginMain').getProjectDir().absolutePath + '/src/main/assets/')
    }
}

ext {
    //这个常量在最后apply的脚本中要用到
    host_output_dir = project(':PluginMain').getBuildDir().absolutePath + "/outputs"
}

apply from: "./plugin.gradle"